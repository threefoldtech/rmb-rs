syntax = "proto3";

message Request {
  // command queue to use on receiver side
  string command = 1;
  // pay load of th emssage
  bytes data = 2;
}

message Error {
  // error code (app specific)
  uint32 code = 1;
  // error message
  string message = 2;
}

// a reply is only data, but it get it's own type
// to support extending later.
message Reply { bytes data = 1; }

// a response can be an error, or data
message Response {
  oneof body {
    Reply reply = 1;
    Error error = 2;
  }
}

message Address {
  uint32 twin = 1;
  optional string connection = 2;
}

message Envelope {
  // uid is auto generated by rmb.
  string uid = 1;
  // client specific tags
  optional string tags = 2;
  // timestamp of sending the envlope
  uint64 timestamp = 3;
  // message TTL from the time of send
  uint64 expiration = 4;
  // sender id
  Address source = 5;
  // destination of the envlope
  Address destination = 6;
  // message inside the envlope
  oneof message {
    Request request = 7;
    Response response = 8;
  }
  // signature
  optional bytes signature = 9;

  // schema of the payload of either the request or the resposne message.
  optional string schema = 10;

  // a federation url (domain)
  // if not provided the relay assumes it's a local twin
  // but if provided it can be checked against the relay
  // domain, and hence decided if message need federation
  // or local.
  optional string federation = 11;
}
