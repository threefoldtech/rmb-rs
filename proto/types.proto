syntax = "proto3";

message Request {
  // command queue to use on receiver side
  string command = 1;
  // pay load of th emssage
  bytes data = 2;
  // the reply queue used to receive the reply on
  string reply_to = 3;
}

message Error {
  // error code (app specific)
  uint32 code = 1;
  // error message
  string message = 2;
}

// a reply is only data, but it get it's own type
// to support extending later.
message Reply { bytes data = 1; }

// a response can be an error, or data
message Response {
  oneof body {
    Reply reply = 1;
    Error error = 2;
  }
}

// Backlog is some "routing" infomation
// about the message.
message Backlog {
  string uid = 1;
  string reference = 2;
  string reply_to = 3;
}

message Envelope {
  // uid is auto generated by rmb.
  string uid = 1;
  // client specific message id.
  string reference = 2;
  // client specific tags
  optional string tags = 3;
  // timestamp of sending the envlope
  uint64 timestamp = 4;
  // message TTL from the time of send
  uint64 expiration = 5;
  // sender id
  uint32 source = 6;
  // destination of the envlope
  repeated uint32 destinations = 7;
  // message inside the envlope
  oneof message {
    Request request = 8;
    Response response = 9;
  }
  // signature
  optional bytes signature = 10;
}
